#!/usr/bin/env python3
"""
Test script pour v√©rifier le notebook de mod√©lisation de sujets
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import LatentDirichletAllocation
import warnings
warnings.filterwarnings('ignore')

def test_topic_modeling():
    """Test de la mod√©lisation de sujets"""
    print("üéØ TEST DE LA MOD√âLISATION DE SUJETS")
    print("=" * 50)
    
    # Cr√©er un dataset d'exemple
    sample_texts = [
        "artificial intelligence machine learning technology innovation future",
        "climate change environment global warming sustainability green energy",
        "economy market finance business investment stock trading",
        "health medicine medical research treatment disease prevention",
        "education school university student learning online digital",
        "sports football basketball competition championship team victory",
        "politics government election democracy policy reform legislation",
        "technology smartphone computer internet digital transformation innovation",
        "travel tourism vacation destination culture adventure exploration",
        "food cooking recipe restaurant cuisine nutrition healthy eating"
    ]
    
    print(f"üìä Dataset d'exemple cr√©√©: {len(sample_texts)} documents")
    
    # Vectorisation TF-IDF
    try:
        vectorizer = TfidfVectorizer(
            max_features=100,
            min_df=1,
            max_df=0.8,
            stop_words='english'
        )
        
        tfidf_matrix = vectorizer.fit_transform(sample_texts)
        print(f"‚úÖ Vectorisation TF-IDF r√©ussie: {tfidf_matrix.shape}")
        
    except Exception as e:
        print(f"‚ùå Erreur vectorisation: {e}")
        return False
    
    # Mod√©lisation LDA
    try:
        n_topics = 3
        lda_model = LatentDirichletAllocation(
            n_components=n_topics,
            random_state=42,
            max_iter=10
        )
        
        lda_topics = lda_model.fit_transform(tfidf_matrix)
        print(f"‚úÖ Mod√®le LDA entra√Æn√©: {n_topics} sujets")
        
        # Afficher les sujets
        feature_names = vectorizer.get_feature_names_out()
        print("\nüéØ SUJETS D√âCOUVERTS:")
        
        for topic_idx, topic in enumerate(lda_model.components_):
            top_words_idx = topic.argsort()[-5:][::-1]
            top_words = [feature_names[i] for i in top_words_idx]
            print(f"  Sujet {topic_idx}: {', '.join(top_words)}")
        
        # Assigner les sujets
        assigned_topics = np.argmax(lda_topics, axis=1)
        confidence_scores = np.max(lda_topics, axis=1)
        
        print(f"\nüìä Assignation des sujets:")
        for i, (topic, conf) in enumerate(zip(assigned_topics, confidence_scores)):
            print(f"  Doc {i}: Sujet {topic} (confiance: {conf:.3f})")
        
        print(f"\nüìà Confiance moyenne: {confidence_scores.mean():.3f}")
        
    except Exception as e:
        print(f"‚ùå Erreur LDA: {e}")
        return False
    
    # Test des biblioth√®ques avanc√©es
    print("\nü§ñ TEST DES BIBLIOTH√àQUES AVANC√âES:")
    
    try:
        from bertopic import BERTopic
        print("‚úÖ BERTopic disponible")
    except ImportError:
        print("‚ö†Ô∏è BERTopic non disponible")
    
    try:
        from sentence_transformers import SentenceTransformer
        print("‚úÖ SentenceTransformers disponible")
    except ImportError:
        print("‚ö†Ô∏è SentenceTransformers non disponible")
    
    try:
        import umap
        print("‚úÖ UMAP disponible")
    except ImportError:
        print("‚ö†Ô∏è UMAP non disponible")
    
    try:
        import hdbscan
        print("‚úÖ HDBSCAN disponible")
    except ImportError:
        print("‚ö†Ô∏è HDBSCAN non disponible")
    
    return True

def main():
    """Fonction principale"""
    print("üöÄ Test du Notebook de Mod√©lisation de Sujets")
    print("=" * 60)
    
    success = test_topic_modeling()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("\nüìù Le notebook 03_topic_modeling_fixed.ipynb est pr√™t √† √™tre utilis√©!")
        print("\nüöÄ Prochaines √©tapes:")
        print("  1. Ouvrir Jupyter: jupyter notebook")
        print("  2. Ex√©cuter: notebooks/03_topic_modeling_fixed.ipynb")
        print("  3. Analyser les sujets d√©couverts")
    else:
        print("‚ùå Certains tests ont √©chou√©.")
        print("üîß V√©rifiez l'installation des d√©pendances.")

if __name__ == "__main__":
    main()
